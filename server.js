import { handler } from './build/handler.js'; // This is generated by `npm run build`

import { WebSocketServer } from 'ws';
import express from 'express';
import http from 'http';
import path from 'path';
import { fileURLToPath } from 'url';
import multer from 'multer';
import TelegramBot from 'node-telegram-bot-api';
import dotenv from 'dotenv';
import fs from 'fs/promises';

// --- Basic Setup ---
const PORT = process.env.PORT || 8080;

dotenv.config(); 

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const server = http.createServer(app);

const token = process.env.TELEGRAM_BOT_TOKEN;
const chatId = process.env.TELEGRAM_CHAT_ID;

if (!token || !chatId) {
    console.error("Telegram bot token or chat ID is not set in environment variables.");
    console.log("Telegram bot functionality will be disabled.");
}

const bot = token && chatId ? new TelegramBot(token) : null

// --- WebSocket Logic (from backend/index.js) ---
const wss = new WebSocketServer({ server }); // Attach to the HTTP server

let currentCount = 10000;

async function fetchFtdCount() { return currentCount + 1; }
function sendCount(ws) { ws.send(JSON.stringify({ type: 'ftd', count: currentCount })); }
function broadcastCount() {
    const message = JSON.stringify({ type: 'ftd', count: currentCount });
    for (const client of wss.clients) { client.send(message); }
}
async function refreshCount() {
    try {
        const latest = await fetchFtdCount();
        currentCount = latest;
        broadcastCount();
    } catch (error) { console.error('Error refreshing count:', error); }
}
wss.on('connection', (ws) => {
    console.log('New client connected');
    sendCount(ws);
    ws.on('close', () => { console.log('Client disconnected'); });
});
setInterval(refreshCount, 1000);
refreshCount();

// --- Telegram Bot Logic

async function forwardToTelegram(title, data, file) {
    if (!bot) {
        console.error("Telegram bot is not initialized. Cannot forward message.");
        return;
    }

    let message = "<b>${title}</b>\n\n";
    for (const [key, value] of Object.entries(data)) {
        message += `<b>${key}:</b> ${value || 'N\A'}\n`;
    }

    try {
        await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
        if (file) {
            await bot.sendDocument(chatId, file.path, {
                caption: "Attached file"
            });
        }
        console.log("Message forwarded to Telegram successfully.");
    } catch (error) {
        console.error("Error forwarding message to Telegram:", error);   
    } finally {
        if (file) {
            try {
                await fs.unlink(file.path);
                console.log("Temporary file deleted successfully.");
            } catch (unlinkError) {
                console.error("Error deleting temporary file:", unlinkError);
            }
    } 
}

// --- API Route Logic (from backend/index.js) ---
// **IMPORTANT**: The path for uploads is now relative to the root.
const upload = multer({ dest: path.join(__dirname, 'uploads/') });

app.post('/api/apply', upload.single('resume'), (req, res) => {
    console.log("Received application:", req.body);
    console.log("Resume file:", req.file);

    await forwardToTelegram("New Application", req.body, req.file);

    res.json({ success: true, message: "Application received successfully!" });
});

app.post('/api/referal', upload.single('referal'), (req, res) => {
    console.log("Received referal:", req.body);
    console.log("Referal file:", req.file);

    await forwardToTelegram("New Referal", req.body, req.file);
    
    res.json({ success: true, message: "Referal received successfully!" });
});

// --- SvelteKit Middleware ---
// This must be the LAST middleware.
app.use(handler);

// --- Start Server ---
server.listen(PORT, () => {
    console.log(`Server listening on http://localhost:${PORT}`);
});