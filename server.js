// <git_root>/server.js

// SvelteKit adapter handler
import { handler } from './build/handler.js'; // This is generated by `npm run build`

// Your backend dependencies
import { WebSocketServer } from 'ws';
import express from 'express';
import http from 'http';
import path from 'path';
import { fileURLToPath } from 'url';
import multer from 'multer';

// --- Basic Setup ---
const PORT = process.env.PORT || 8080;
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const server = http.createServer(app);

// --- WebSocket Logic (from backend/index.js) ---
const wss = new WebSocketServer({ server }); // Attach to the HTTP server

let currentCount = 10000;

async function fetchFtdCount() { return currentCount + 1; }
function sendCount(ws) { ws.send(JSON.stringify({ type: 'ftd', count: currentCount })); }
function broadcastCount() {
    const message = JSON.stringify({ type: 'ftd', count: currentCount });
    for (const client of wss.clients) { client.send(message); }
}
async function refreshCount() {
    try {
        const latest = await fetchFtdCount();
        currentCount = latest;
        broadcastCount();
    } catch (error) { console.error('Error refreshing count:', error); }
}
wss.on('connection', (ws) => {
    console.log('New client connected');
    sendCount(ws);
    ws.on('close', () => { console.log('Client disconnected'); });
});
setInterval(refreshCount, 1000);
refreshCount();

// --- API Route Logic (from backend/index.js) ---
// **IMPORTANT**: The path for uploads is now relative to the root.
const upload = multer({ dest: path.join(__dirname, 'uploads/') });

app.post('/api/apply', upload.single('resume'), (req, res) => {
    console.log("Received application:", req.body);
    res.json({ success: true, message: "Application received successfully!" });
});

app.post('/api/referal', upload.single('referal'), (req, res) => {
    console.log("Received referal:", req.body);
    res.json({ success: true, message: "Referal received successfully!" });
});

// --- SvelteKit Middleware ---
// This must be the LAST middleware.
app.use(handler);

// --- Start Server ---
server.listen(PORT, () => {
    console.log(`Server listening on http://localhost:${PORT}`);
});